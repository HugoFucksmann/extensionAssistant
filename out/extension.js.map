{"version":3,"file":"extension.js","mappings":";;;;;;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,yBAAyB,kBAAkB,KAAK;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,CAAC,qCAAqC,8BAA8B,KAAK;AACzE;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB,eAAe,KAAK;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,2BAA2B,oBAAoB,KAAK;AACrD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,iCAAiC,0BAA0B,KAAK;AACjE;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B,uBAAuB,KAAK;AAC3D;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B,mBAAmB,KAAK;AACnD;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,2BAA2B,oBAAoB,KAAK;AACrD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uBAAuB,gBAAgB,KAAK;AAC7C;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC,2BAA2B,KAAK;AACnE;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,CAAC,mCAAmC,4BAA4B,KAAK;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,GAAG,WAAW,GAAG,WAAW,GAAG,UAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB,GAAG,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,+BAA+B,cAAc,UAAU;AAC9J;AACA;AACA;AACA;AACA,iGAAiG,WAAW;AAC5G;AACA;AACA,6EAA6E,YAAY;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wCAAwC,sDAAsD;AAClJ;AACA;AACA,sFAAsF;AACtF;AACA;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,eAAe,IAAI,UAAU;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe,KAAK,iBAAiB,EAAE,oBAAoB,IAAI,QAAQ;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4BAA4B;AAC9E;AACA;AACA;AACA;AACA,6DAA6D,kCAAkC;AAC/F;AACA;AACA;AACA;AACA,6EAA6E,kCAAkC;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4BAA4B;AAC9E;AACA;AACA;AACA;AACA,6DAA6D,kCAAkC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,kCAAkC;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4BAA4B;AAC9E;AACA;AACA;AACA;AACA,6DAA6D,kCAAkC;AAC/F;AACA;AACA;AACA;AACA,sFAAsF,kCAAkC;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oCAAoC;AACtE;AACA;AACA,4BAA4B,2CAA2C;AACvE;AACA;AACA;AACA;AACA;AACA,uDAAuD,4BAA4B;AACnF;AACA,gCAAgC,6BAA6B;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uFAAuF,cAAc;AACtH,uBAAuB,gCAAgC,qCAAqC,2CAA2C;AACvI,4BAA4B,MAAM,iBAAiB,YAAY;AAC/D,uBAAuB;AACvB,8BAA8B;AAC9B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,aAAa;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,SAAS;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjiBAAiB,0BAA0B,aAAa;AACxD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA,+FAA+F,KAAK;AACpG;AACA;AACA,0FAA0F,MAAM,uBAAuB,+BAA+B;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,KAAK,mBAAmB,IAAI;AACpG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4BAA4B;AACpC;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,oEAAoE,kBAAkB;AACtF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,mCAAmC;AAC3C;AACA;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,kBAAkB;AAC5F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,cAAc,OAAO;AAClE,KAAK;AACL,8GAA8G,6BAA6B;AAC3I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B;AAChF;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,sDAAsD;AACtD;AACA;AACA,4EAA4E;AAC5E,wEAAwE,gQAAgQ;AACxU;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,4DAA4D;AAC5D;AACA;AACA,4EAA4E;AAC5E,8EAA8E,gQAAgQ;AAC9U;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,wEAAwE,gQAAgQ;AACxU;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,mDAAmD;AACnD;AACA,4EAA4E;AAC5E;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA,mCAAmC,4BAA4B;AAC/D,iCAAiC,sBAAsB;AACvD,QAAQ,6CAA6C;AACrD;AACA,0EAA0E;AAC1E,4EAA4E;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA;AACA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sources":["webpack://extensionassistant/./node_modules/@google/generative-ai/dist/index.js","webpack://extensionassistant/./src/agents/factory/agentFactory.ts","webpack://extensionassistant/./src/agents/factory/index.ts","webpack://extensionassistant/./src/agents/memory/memoryAgent.ts","webpack://extensionassistant/./src/agents/memory/tools/chatMemory.ts","webpack://extensionassistant/./src/agents/memory/tools/index.ts","webpack://extensionassistant/./src/agents/memory/tools/projectMemory.ts","webpack://extensionassistant/./src/agents/memory/tools/temporaryMemory.ts","webpack://extensionassistant/./src/agents/memory/tools/types.ts","webpack://extensionassistant/./src/agents/model/modelAgent.ts","webpack://extensionassistant/./src/agents/orchestratorAgent.ts","webpack://extensionassistant/./src/db/SQLiteStorage.ts","webpack://extensionassistant/./src/extension.ts","webpack://extensionassistant/./src/models/baseAPI.ts","webpack://extensionassistant/./src/models/gemini.ts","webpack://extensionassistant/./src/models/ollama.ts","webpack://extensionassistant/./src/utils/eventBus.ts","webpack://extensionassistant/./src/utils/events.ts","webpack://extensionassistant/./src/vscode_integration/webviewManager.ts","webpack://extensionassistant/external commonjs \"fs\"","webpack://extensionassistant/external commonjs \"path\"","webpack://extensionassistant/external commonjs \"sqlite3\"","webpack://extensionassistant/external commonjs \"vscode\"","webpack://extensionassistant/webpack/bootstrap","webpack://extensionassistant/webpack/before-startup","webpack://extensionassistant/webpack/startup","webpack://extensionassistant/webpack/after-startup"],"sourcesContent":["'use strict';\n\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */\nexports.SchemaType = void 0;\n(function (SchemaType) {\n    /** String type. */\n    SchemaType[\"STRING\"] = \"string\";\n    /** Number type. */\n    SchemaType[\"NUMBER\"] = \"number\";\n    /** Integer type. */\n    SchemaType[\"INTEGER\"] = \"integer\";\n    /** Boolean type. */\n    SchemaType[\"BOOLEAN\"] = \"boolean\";\n    /** Array type. */\n    SchemaType[\"ARRAY\"] = \"array\";\n    /** Object type. */\n    SchemaType[\"OBJECT\"] = \"object\";\n})(exports.SchemaType || (exports.SchemaType = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @public\n */\nexports.ExecutableCodeLanguage = void 0;\n(function (ExecutableCodeLanguage) {\n    ExecutableCodeLanguage[\"LANGUAGE_UNSPECIFIED\"] = \"language_unspecified\";\n    ExecutableCodeLanguage[\"PYTHON\"] = \"python\";\n})(exports.ExecutableCodeLanguage || (exports.ExecutableCodeLanguage = {}));\n/**\n * Possible outcomes of code execution.\n * @public\n */\nexports.Outcome = void 0;\n(function (Outcome) {\n    /**\n     * Unspecified status. This value should not be used.\n     */\n    Outcome[\"OUTCOME_UNSPECIFIED\"] = \"outcome_unspecified\";\n    /**\n     * Code execution completed successfully.\n     */\n    Outcome[\"OUTCOME_OK\"] = \"outcome_ok\";\n    /**\n     * Code execution finished but with a failure. `stderr` should contain the\n     * reason.\n     */\n    Outcome[\"OUTCOME_FAILED\"] = \"outcome_failed\";\n    /**\n     * Code execution ran for too long, and was cancelled. There may or may not\n     * be a partial output present.\n     */\n    Outcome[\"OUTCOME_DEADLINE_EXCEEDED\"] = \"outcome_deadline_exceeded\";\n})(exports.Outcome || (exports.Outcome = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Possible roles.\n * @public\n */\nconst POSSIBLE_ROLES = [\"user\", \"model\", \"function\", \"system\"];\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */\nexports.HarmCategory = void 0;\n(function (HarmCategory) {\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})(exports.HarmCategory || (exports.HarmCategory = {}));\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */\nexports.HarmBlockThreshold = void 0;\n(function (HarmBlockThreshold) {\n    // Threshold is unspecified.\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    // Content with NEGLIGIBLE will be allowed.\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    // Content with NEGLIGIBLE and LOW will be allowed.\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    // All content will be allowed.\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(exports.HarmBlockThreshold || (exports.HarmBlockThreshold = {}));\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */\nexports.HarmProbability = void 0;\n(function (HarmProbability) {\n    // Probability is unspecified.\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    // Content has a negligible chance of being unsafe.\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    // Content has a low chance of being unsafe.\n    HarmProbability[\"LOW\"] = \"LOW\";\n    // Content has a medium chance of being unsafe.\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    // Content has a high chance of being unsafe.\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(exports.HarmProbability || (exports.HarmProbability = {}));\n/**\n * Reason that a prompt was blocked.\n * @public\n */\nexports.BlockReason = void 0;\n(function (BlockReason) {\n    // A blocked reason was not specified.\n    BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    // Content was blocked by safety settings.\n    BlockReason[\"SAFETY\"] = \"SAFETY\";\n    // Content was blocked, but the reason is uncategorized.\n    BlockReason[\"OTHER\"] = \"OTHER\";\n})(exports.BlockReason || (exports.BlockReason = {}));\n/**\n * Reason that a candidate finished.\n * @public\n */\nexports.FinishReason = void 0;\n(function (FinishReason) {\n    // Default value. This value is unused.\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    // Natural stop point of the model or provided stop sequence.\n    FinishReason[\"STOP\"] = \"STOP\";\n    // The maximum number of tokens as specified in the request was reached.\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    // The candidate content was flagged for safety reasons.\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    // The candidate content was flagged for recitation reasons.\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    // The candidate content was flagged for using an unsupported language.\n    FinishReason[\"LANGUAGE\"] = \"LANGUAGE\";\n    // Unknown reason.\n    FinishReason[\"OTHER\"] = \"OTHER\";\n})(exports.FinishReason || (exports.FinishReason = {}));\n/**\n * Task type for embedding content.\n * @public\n */\nexports.TaskType = void 0;\n(function (TaskType) {\n    TaskType[\"TASK_TYPE_UNSPECIFIED\"] = \"TASK_TYPE_UNSPECIFIED\";\n    TaskType[\"RETRIEVAL_QUERY\"] = \"RETRIEVAL_QUERY\";\n    TaskType[\"RETRIEVAL_DOCUMENT\"] = \"RETRIEVAL_DOCUMENT\";\n    TaskType[\"SEMANTIC_SIMILARITY\"] = \"SEMANTIC_SIMILARITY\";\n    TaskType[\"CLASSIFICATION\"] = \"CLASSIFICATION\";\n    TaskType[\"CLUSTERING\"] = \"CLUSTERING\";\n})(exports.TaskType || (exports.TaskType = {}));\n/**\n * @public\n */\nexports.FunctionCallingMode = void 0;\n(function (FunctionCallingMode) {\n    // Unspecified function calling mode. This value should not be used.\n    FunctionCallingMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    // Default model behavior, model decides to predict either a function call\n    // or a natural language repspose.\n    FunctionCallingMode[\"AUTO\"] = \"AUTO\";\n    // Model is constrained to always predicting a function call only.\n    // If \"allowed_function_names\" are set, the predicted function call will be\n    // limited to any one of \"allowed_function_names\", else the predicted\n    // function call will be any one of the provided \"function_declarations\".\n    FunctionCallingMode[\"ANY\"] = \"ANY\";\n    // Model will not predict any function call. Model behavior is same as when\n    // not passing any function declarations.\n    FunctionCallingMode[\"NONE\"] = \"NONE\";\n})(exports.FunctionCallingMode || (exports.FunctionCallingMode = {}));\n/**\n * The mode of the predictor to be used in dynamic retrieval.\n * @public\n */\nexports.DynamicRetrievalMode = void 0;\n(function (DynamicRetrievalMode) {\n    // Unspecified function calling mode. This value should not be used.\n    DynamicRetrievalMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    // Run retrieval only when system decides it is necessary.\n    DynamicRetrievalMode[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n})(exports.DynamicRetrievalMode || (exports.DynamicRetrievalMode = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Basic error type for this SDK.\n * @public\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message) {\n        super(`[GoogleGenerativeAI Error]: ${message}`);\n    }\n}\n/**\n * Errors in the contents of a response from the model. This includes parsing\n * errors, or responses including a safety block reason.\n * @public\n */\nclass GoogleGenerativeAIResponseError extends GoogleGenerativeAIError {\n    constructor(message, response) {\n        super(message);\n        this.response = response;\n    }\n}\n/**\n * Error class covering HTTP errors when calling the server. Includes HTTP\n * status, statusText, and optional details, if provided in the server response.\n * @public\n */\nclass GoogleGenerativeAIFetchError extends GoogleGenerativeAIError {\n    constructor(message, status, statusText, errorDetails) {\n        super(message);\n        this.status = status;\n        this.statusText = statusText;\n        this.errorDetails = errorDetails;\n    }\n}\n/**\n * Errors in the contents of a request originating from user input.\n * @public\n */\nclass GoogleGenerativeAIRequestInputError extends GoogleGenerativeAIError {\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst DEFAULT_API_VERSION = \"v1beta\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */\nconst PACKAGE_VERSION = \"0.21.0\";\nconst PACKAGE_LOG_HEADER = \"genai-js\";\nvar Task;\n(function (Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})(Task || (Task = {}));\nclass RequestUrl {\n    constructor(model, task, apiKey, stream, requestOptions) {\n        this.model = model;\n        this.task = task;\n        this.apiKey = apiKey;\n        this.stream = stream;\n        this.requestOptions = requestOptions;\n    }\n    toString() {\n        var _a, _b;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;\n        let url = `${baseUrl}/${apiVersion}/${this.model}:${this.task}`;\n        if (this.stream) {\n            url += \"?alt=sse\";\n        }\n        return url;\n    }\n}\n/**\n * Simple, but may become more complex if we add more versions to log.\n */\nfunction getClientHeaders(requestOptions) {\n    const clientHeaders = [];\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        clientHeaders.push(requestOptions.apiClient);\n    }\n    clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);\n    return clientHeaders.join(\" \");\n}\nasync function getHeaders(url) {\n    var _a;\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"x-goog-api-client\", getClientHeaders(url.requestOptions));\n    headers.append(\"x-goog-api-key\", url.apiKey);\n    let customHeaders = (_a = url.requestOptions) === null || _a === void 0 ? void 0 : _a.customHeaders;\n    if (customHeaders) {\n        if (!(customHeaders instanceof Headers)) {\n            try {\n                customHeaders = new Headers(customHeaders);\n            }\n            catch (e) {\n                throw new GoogleGenerativeAIRequestInputError(`unable to convert customHeaders value ${JSON.stringify(customHeaders)} to Headers: ${e.message}`);\n            }\n        }\n        for (const [headerName, headerValue] of customHeaders.entries()) {\n            if (headerName === \"x-goog-api-key\") {\n                throw new GoogleGenerativeAIRequestInputError(`Cannot set reserved header name ${headerName}`);\n            }\n            else if (headerName === \"x-goog-api-client\") {\n                throw new GoogleGenerativeAIRequestInputError(`Header name ${headerName} can only be set using the apiClient field`);\n            }\n            headers.append(headerName, headerValue);\n        }\n    }\n    return headers;\n}\nasync function constructModelRequest(model, task, apiKey, stream, body, requestOptions) {\n    const url = new RequestUrl(model, task, apiKey, stream, requestOptions);\n    return {\n        url: url.toString(),\n        fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), { method: \"POST\", headers: await getHeaders(url), body }),\n    };\n}\nasync function makeModelRequest(model, task, apiKey, stream, body, requestOptions = {}, \n// Allows this to be stubbed for tests\nfetchFn = fetch) {\n    const { url, fetchOptions } = await constructModelRequest(model, task, apiKey, stream, body, requestOptions);\n    return makeRequest(url, fetchOptions, fetchFn);\n}\nasync function makeRequest(url, fetchOptions, fetchFn = fetch) {\n    let response;\n    try {\n        response = await fetchFn(url, fetchOptions);\n    }\n    catch (e) {\n        handleResponseError(e, url);\n    }\n    if (!response.ok) {\n        await handleResponseNotOk(response, url);\n    }\n    return response;\n}\nfunction handleResponseError(e, url) {\n    let err = e;\n    if (!(e instanceof GoogleGenerativeAIFetchError ||\n        e instanceof GoogleGenerativeAIRequestInputError)) {\n        err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);\n        err.stack = e.stack;\n    }\n    throw err;\n}\nasync function handleResponseNotOk(response, url) {\n    let message = \"\";\n    let errorDetails;\n    try {\n        const json = await response.json();\n        message = json.error.message;\n        if (json.error.details) {\n            message += ` ${JSON.stringify(json.error.details)}`;\n            errorDetails = json.error.details;\n        }\n    }\n    catch (e) {\n        // ignored\n    }\n    throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);\n}\n/**\n * Generates the request options to be passed to the fetch API.\n * @param requestOptions - The user-defined request options.\n * @returns The generated request options.\n */\nfunction buildFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) !== undefined || (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const controller = new AbortController();\n        if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n            setTimeout(() => controller.abort(), requestOptions.timeout);\n        }\n        if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) {\n            requestOptions.signal.addEventListener(\"abort\", () => {\n                controller.abort();\n            });\n        }\n        fetchOptions.signal = controller.signal;\n    }\n    return fetchOptions;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */\nfunction addHelpers(response) {\n    response.text = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning text from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            return getText(response);\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return \"\";\n    };\n    /**\n     * TODO: remove at next major version\n     */\n    response.functionCall = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning function calls from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            console.warn(`response.functionCall() is deprecated. ` +\n                `Use response.functionCalls() instead.`);\n            return getFunctionCalls(response)[0];\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return undefined;\n    };\n    response.functionCalls = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning function calls from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            return getFunctionCalls(response);\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return undefined;\n    };\n    return response;\n}\n/**\n * Returns all text found in all parts of first candidate.\n */\nfunction getText(response) {\n    var _a, _b, _c, _d;\n    const textStrings = [];\n    if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {\n            if (part.text) {\n                textStrings.push(part.text);\n            }\n            if (part.executableCode) {\n                textStrings.push(\"\\n```\" +\n                    part.executableCode.language +\n                    \"\\n\" +\n                    part.executableCode.code +\n                    \"\\n```\\n\");\n            }\n            if (part.codeExecutionResult) {\n                textStrings.push(\"\\n```\\n\" + part.codeExecutionResult.output + \"\\n```\\n\");\n            }\n        }\n    }\n    if (textStrings.length > 0) {\n        return textStrings.join(\"\");\n    }\n    else {\n        return \"\";\n    }\n}\n/**\n * Returns functionCall of first candidate.\n */\nfunction getFunctionCalls(response) {\n    var _a, _b, _c, _d;\n    const functionCalls = [];\n    if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {\n            if (part.functionCall) {\n                functionCalls.push(part.functionCall);\n            }\n        }\n    }\n    if (functionCalls.length > 0) {\n        return functionCalls;\n    }\n    else {\n        return undefined;\n    }\n}\nconst badFinishReasons = [\n    exports.FinishReason.RECITATION,\n    exports.FinishReason.SAFETY,\n    exports.FinishReason.LANGUAGE,\n];\nfunction hadBadFinishReason(candidate) {\n    return (!!candidate.finishReason &&\n        badFinishReasons.includes(candidate.finishReason));\n}\nfunction formatBlockErrorMessage(response) {\n    var _a, _b, _c;\n    let message = \"\";\n    if ((!response.candidates || response.candidates.length === 0) &&\n        response.promptFeedback) {\n        message += \"Response was blocked\";\n        if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {\n            message += ` due to ${response.promptFeedback.blockReason}`;\n        }\n        if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {\n            message += `: ${response.promptFeedback.blockReasonMessage}`;\n        }\n    }\n    else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {\n        const firstCandidate = response.candidates[0];\n        if (hadBadFinishReason(firstCandidate)) {\n            message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n            if (firstCandidate.finishMessage) {\n                message += `: ${firstCandidate.finishMessage}`;\n            }\n        }\n    }\n    return message;\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */\nfunction processStream(response) {\n    const inputStream = response.body.pipeThrough(new TextDecoderStream(\"utf8\", { fatal: true }));\n    const responseStream = getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return {\n        stream: generateResponseSequence(stream1),\n        response: getResponsePromise(stream2),\n    };\n}\nasync function getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            return addHelpers(aggregateResponses(allResponses));\n        }\n        allResponses.push(value);\n    }\n}\nfunction generateResponseSequence(stream) {\n    return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {\n        const reader = stream.getReader();\n        while (true) {\n            const { value, done } = yield __await(reader.read());\n            if (done) {\n                break;\n            }\n            yield yield __await(addHelpers(value));\n        }\n    });\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */\nfunction getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start(controller) {\n            let currentText = \"\";\n            return pump();\n            function pump() {\n                return reader.read().then(({ value, done }) => {\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new GoogleGenerativeAIError(\"Failed to parse stream\"));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match(responseLineRE);\n                    let parsedResponse;\n                    while (match) {\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        }\n                        catch (e) {\n                            controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: \"${match[1]}\"`));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match(responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        },\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */\nfunction aggregateResponses(responses) {\n    const lastResponse = responses[responses.length - 1];\n    const aggregatedResponse = {\n        promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback,\n    };\n    for (const response of responses) {\n        if (response.candidates) {\n            for (const candidate of response.candidates) {\n                const i = candidate.index;\n                if (!aggregatedResponse.candidates) {\n                    aggregatedResponse.candidates = [];\n                }\n                if (!aggregatedResponse.candidates[i]) {\n                    aggregatedResponse.candidates[i] = {\n                        index: candidate.index,\n                    };\n                }\n                // Keep overwriting, the last one will be final\n                aggregatedResponse.candidates[i].citationMetadata =\n                    candidate.citationMetadata;\n                aggregatedResponse.candidates[i].groundingMetadata =\n                    candidate.groundingMetadata;\n                aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n                aggregatedResponse.candidates[i].finishMessage =\n                    candidate.finishMessage;\n                aggregatedResponse.candidates[i].safetyRatings =\n                    candidate.safetyRatings;\n                /**\n                 * Candidates should always have content and parts, but this handles\n                 * possible malformed responses.\n                 */\n                if (candidate.content && candidate.content.parts) {\n                    if (!aggregatedResponse.candidates[i].content) {\n                        aggregatedResponse.candidates[i].content = {\n                            role: candidate.content.role || \"user\",\n                            parts: [],\n                        };\n                    }\n                    const newPart = {};\n                    for (const part of candidate.content.parts) {\n                        if (part.text) {\n                            newPart.text = part.text;\n                        }\n                        if (part.functionCall) {\n                            newPart.functionCall = part.functionCall;\n                        }\n                        if (part.executableCode) {\n                            newPart.executableCode = part.executableCode;\n                        }\n                        if (part.codeExecutionResult) {\n                            newPart.codeExecutionResult = part.codeExecutionResult;\n                        }\n                        if (Object.keys(newPart).length === 0) {\n                            newPart.text = \"\";\n                        }\n                        aggregatedResponse.candidates[i].content.parts.push(newPart);\n                    }\n                }\n            }\n        }\n        if (response.usageMetadata) {\n            aggregatedResponse.usageMetadata = response.usageMetadata;\n        }\n    }\n    return aggregatedResponse;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function generateContentStream(apiKey, model, params, requestOptions) {\n    const response = await makeModelRequest(model, Task.STREAM_GENERATE_CONTENT, apiKey, \n    /* stream */ true, JSON.stringify(params), requestOptions);\n    return processStream(response);\n}\nasync function generateContent(apiKey, model, params, requestOptions) {\n    const response = await makeModelRequest(model, Task.GENERATE_CONTENT, apiKey, \n    /* stream */ false, JSON.stringify(params), requestOptions);\n    const responseJson = await response.json();\n    const enhancedResponse = addHelpers(responseJson);\n    return {\n        response: enhancedResponse,\n    };\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction formatSystemInstruction(input) {\n    // null or undefined\n    if (input == null) {\n        return undefined;\n    }\n    else if (typeof input === \"string\") {\n        return { role: \"system\", parts: [{ text: input }] };\n    }\n    else if (input.text) {\n        return { role: \"system\", parts: [input] };\n    }\n    else if (input.parts) {\n        if (!input.role) {\n            return { role: \"system\", parts: input.parts };\n        }\n        else {\n            return input;\n        }\n    }\n}\nfunction formatNewContent(request) {\n    let newParts = [];\n    if (typeof request === \"string\") {\n        newParts = [{ text: request }];\n    }\n    else {\n        for (const partOrString of request) {\n            if (typeof partOrString === \"string\") {\n                newParts.push({ text: partOrString });\n            }\n            else {\n                newParts.push(partOrString);\n            }\n        }\n    }\n    return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = { role: \"user\", parts: [] };\n    const functionContent = { role: \"function\", parts: [] };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts) {\n        if (\"functionResponse\" in part) {\n            functionContent.parts.push(part);\n            hasFunctionContent = true;\n        }\n        else {\n            userContent.parts.push(part);\n            hasUserContent = true;\n        }\n    }\n    if (hasUserContent && hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.\");\n    }\n    if (!hasUserContent && !hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"No content is provided for sending chat message.\");\n    }\n    if (hasUserContent) {\n        return userContent;\n    }\n    return functionContent;\n}\nfunction formatCountTokensInput(params, modelParams) {\n    var _a;\n    let formattedGenerateContentRequest = {\n        model: modelParams === null || modelParams === void 0 ? void 0 : modelParams.model,\n        generationConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.generationConfig,\n        safetySettings: modelParams === null || modelParams === void 0 ? void 0 : modelParams.safetySettings,\n        tools: modelParams === null || modelParams === void 0 ? void 0 : modelParams.tools,\n        toolConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.toolConfig,\n        systemInstruction: modelParams === null || modelParams === void 0 ? void 0 : modelParams.systemInstruction,\n        cachedContent: (_a = modelParams === null || modelParams === void 0 ? void 0 : modelParams.cachedContent) === null || _a === void 0 ? void 0 : _a.name,\n        contents: [],\n    };\n    const containsGenerateContentRequest = params.generateContentRequest != null;\n    if (params.contents) {\n        if (containsGenerateContentRequest) {\n            throw new GoogleGenerativeAIRequestInputError(\"CountTokensRequest must have one of contents or generateContentRequest, not both.\");\n        }\n        formattedGenerateContentRequest.contents = params.contents;\n    }\n    else if (containsGenerateContentRequest) {\n        formattedGenerateContentRequest = Object.assign(Object.assign({}, formattedGenerateContentRequest), params.generateContentRequest);\n    }\n    else {\n        // Array or string\n        const content = formatNewContent(params);\n        formattedGenerateContentRequest.contents = [content];\n    }\n    return { generateContentRequest: formattedGenerateContentRequest };\n}\nfunction formatGenerateContentInput(params) {\n    let formattedRequest;\n    if (params.contents) {\n        formattedRequest = params;\n    }\n    else {\n        // Array or string\n        const content = formatNewContent(params);\n        formattedRequest = { contents: [content] };\n    }\n    if (params.systemInstruction) {\n        formattedRequest.systemInstruction = formatSystemInstruction(params.systemInstruction);\n    }\n    return formattedRequest;\n}\nfunction formatEmbedContentInput(params) {\n    if (typeof params === \"string\" || Array.isArray(params)) {\n        const content = formatNewContent(params);\n        return { content };\n    }\n    return params;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// https://ai.google.dev/api/rest/v1beta/Content#part\nconst VALID_PART_FIELDS = [\n    \"text\",\n    \"inlineData\",\n    \"functionCall\",\n    \"functionResponse\",\n    \"executableCode\",\n    \"codeExecutionResult\",\n];\nconst VALID_PARTS_PER_ROLE = {\n    user: [\"text\", \"inlineData\"],\n    function: [\"functionResponse\"],\n    model: [\"text\", \"functionCall\", \"executableCode\", \"codeExecutionResult\"],\n    // System instructions shouldn't be in history anyway.\n    system: [\"text\"],\n};\nfunction validateChatHistory(history) {\n    let prevContent = false;\n    for (const currContent of history) {\n        const { role, parts } = currContent;\n        if (!prevContent && role !== \"user\") {\n            throw new GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);\n        }\n        if (!POSSIBLE_ROLES.includes(role)) {\n            throw new GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);\n        }\n        if (!Array.isArray(parts)) {\n            throw new GoogleGenerativeAIError(\"Content should have 'parts' property with an array of Parts\");\n        }\n        if (parts.length === 0) {\n            throw new GoogleGenerativeAIError(\"Each Content should have at least one part\");\n        }\n        const countFields = {\n            text: 0,\n            inlineData: 0,\n            functionCall: 0,\n            functionResponse: 0,\n            fileData: 0,\n            executableCode: 0,\n            codeExecutionResult: 0,\n        };\n        for (const part of parts) {\n            for (const key of VALID_PART_FIELDS) {\n                if (key in part) {\n                    countFields[key] += 1;\n                }\n            }\n        }\n        const validParts = VALID_PARTS_PER_ROLE[role];\n        for (const key of VALID_PART_FIELDS) {\n            if (!validParts.includes(key) && countFields[key] > 0) {\n                throw new GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);\n            }\n        }\n        prevContent = true;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Do not log a message for this error.\n */\nconst SILENT_ERROR = \"SILENT_ERROR\";\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */\nclass ChatSession {\n    constructor(apiKey, model, params, _requestOptions = {}) {\n        this.model = model;\n        this.params = params;\n        this._requestOptions = _requestOptions;\n        this._history = [];\n        this._sendPromise = Promise.resolve();\n        this._apiKey = apiKey;\n        if (params === null || params === void 0 ? void 0 : params.history) {\n            validateChatHistory(params.history);\n            this._history = params.history;\n        }\n    }\n    /**\n     * Gets the chat history so far. Blocked prompts are not added to history.\n     * Blocked candidates are not added to history, nor are the prompts that\n     * generated them.\n     */\n    async getHistory() {\n        await this._sendPromise;\n        return this._history;\n    }\n    /**\n     * Sends a chat message and receives a non-streaming\n     * {@link GenerateContentResult}.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async sendMessage(request, requestOptions = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n            systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n            cachedContent: (_f = this.params) === null || _f === void 0 ? void 0 : _f.cachedContent,\n            contents: [...this._history, newContent],\n        };\n        const chatSessionRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        let finalResult;\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise\n            .then(() => generateContent(this._apiKey, this.model, generateContentRequest, chatSessionRequestOptions))\n            .then((result) => {\n            var _a;\n            if (result.response.candidates &&\n                result.response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({ parts: [], \n                    // Response seems to come back without a role set.\n                    role: \"model\" }, (_a = result.response.candidates) === null || _a === void 0 ? void 0 : _a[0].content);\n                this._history.push(responseContent);\n            }\n            else {\n                const blockErrorMessage = formatBlockErrorMessage(result.response);\n                if (blockErrorMessage) {\n                    console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n                }\n            }\n            finalResult = result;\n        });\n        await this._sendPromise;\n        return finalResult;\n    }\n    /**\n     * Sends a chat message and receives the response as a\n     * {@link GenerateContentStreamResult} containing an iterable stream\n     * and a response promise.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async sendMessageStream(request, requestOptions = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n            systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n            cachedContent: (_f = this.params) === null || _f === void 0 ? void 0 : _f.cachedContent,\n            contents: [...this._history, newContent],\n        };\n        const chatSessionRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, chatSessionRequestOptions);\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise\n            .then(() => streamPromise)\n            // This must be handled to avoid unhandled rejection, but jump\n            // to the final catch block with a label to not log this error.\n            .catch((_ignored) => {\n            throw new Error(SILENT_ERROR);\n        })\n            .then((streamResult) => streamResult.response)\n            .then((response) => {\n            if (response.candidates && response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({}, response.candidates[0].content);\n                // Response seems to come back without a role set.\n                if (!responseContent.role) {\n                    responseContent.role = \"model\";\n                }\n                this._history.push(responseContent);\n            }\n            else {\n                const blockErrorMessage = formatBlockErrorMessage(response);\n                if (blockErrorMessage) {\n                    console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n                }\n            }\n        })\n            .catch((e) => {\n            // Errors in streamPromise are already catchable by the user as\n            // streamPromise is returned.\n            // Avoid duplicating the error message in logs.\n            if (e.message !== SILENT_ERROR) {\n                // Users do not have access to _sendPromise to catch errors\n                // downstream from streamPromise, so they should not throw.\n                console.error(e);\n            }\n        });\n        return streamPromise;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function countTokens(apiKey, model, params, singleRequestOptions) {\n    const response = await makeModelRequest(model, Task.COUNT_TOKENS, apiKey, false, JSON.stringify(params), singleRequestOptions);\n    return response.json();\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function embedContent(apiKey, model, params, requestOptions) {\n    const response = await makeModelRequest(model, Task.EMBED_CONTENT, apiKey, false, JSON.stringify(params), requestOptions);\n    return response.json();\n}\nasync function batchEmbedContents(apiKey, model, params, requestOptions) {\n    const requestsWithModel = params.requests.map((request) => {\n        return Object.assign(Object.assign({}, request), { model });\n    });\n    const response = await makeModelRequest(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, JSON.stringify({ requests: requestsWithModel }), requestOptions);\n    return response.json();\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class for generative model APIs.\n * @public\n */\nclass GenerativeModel {\n    constructor(apiKey, modelParams, _requestOptions = {}) {\n        this.apiKey = apiKey;\n        this._requestOptions = _requestOptions;\n        if (modelParams.model.includes(\"/\")) {\n            // Models may be named \"models/model-name\" or \"tunedModels/model-name\"\n            this.model = modelParams.model;\n        }\n        else {\n            // If path is not included, assume it's a non-tuned model.\n            this.model = `models/${modelParams.model}`;\n        }\n        this.generationConfig = modelParams.generationConfig || {};\n        this.safetySettings = modelParams.safetySettings || [];\n        this.tools = modelParams.tools;\n        this.toolConfig = modelParams.toolConfig;\n        this.systemInstruction = formatSystemInstruction(modelParams.systemInstruction);\n        this.cachedContent = modelParams.cachedContent;\n    }\n    /**\n     * Makes a single non-streaming call to the model\n     * and returns an object containing a single {@link GenerateContentResponse}.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async generateContent(request, requestOptions = {}) {\n        var _a;\n        const formattedParams = formatGenerateContentInput(request);\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, formattedParams), generativeModelRequestOptions);\n    }\n    /**\n     * Makes a single streaming call to the model and returns an object\n     * containing an iterable stream that iterates over all chunks in the\n     * streaming response as well as a promise that returns the final\n     * aggregated response.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async generateContentStream(request, requestOptions = {}) {\n        var _a;\n        const formattedParams = formatGenerateContentInput(request);\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, formattedParams), generativeModelRequestOptions);\n    }\n    /**\n     * Gets a new {@link ChatSession} instance which can be used for\n     * multi-turn chats.\n     */\n    startChat(startChatParams) {\n        var _a;\n        return new ChatSession(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, startChatParams), this._requestOptions);\n    }\n    /**\n     * Counts the tokens in the provided request.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async countTokens(request, requestOptions = {}) {\n        const formattedParams = formatCountTokensInput(request, {\n            model: this.model,\n            generationConfig: this.generationConfig,\n            safetySettings: this.safetySettings,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n            cachedContent: this.cachedContent,\n        });\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return countTokens(this.apiKey, this.model, formattedParams, generativeModelRequestOptions);\n    }\n    /**\n     * Embeds the provided content.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async embedContent(request, requestOptions = {}) {\n        const formattedParams = formatEmbedContentInput(request);\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return embedContent(this.apiKey, this.model, formattedParams, generativeModelRequestOptions);\n    }\n    /**\n     * Embeds an array of {@link EmbedContentRequest}s.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided to\n     * {@link GoogleGenerativeAI.getGenerativeModel }.\n     */\n    async batchEmbedContents(batchEmbedContentRequest, requestOptions = {}) {\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, generativeModelRequestOptions);\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Top-level class for this SDK\n * @public\n */\nclass GoogleGenerativeAI {\n    constructor(apiKey) {\n        this.apiKey = apiKey;\n    }\n    /**\n     * Gets a {@link GenerativeModel} instance for the provided model name.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        if (!modelParams.model) {\n            throw new GoogleGenerativeAIError(`Must provide a model name. ` +\n                `Example: genai.getGenerativeModel({ model: 'my-model-name' })`);\n        }\n        return new GenerativeModel(this.apiKey, modelParams, requestOptions);\n    }\n    /**\n     * Creates a {@link GenerativeModel} instance from provided content cache.\n     */\n    getGenerativeModelFromCachedContent(cachedContent, modelParams, requestOptions) {\n        if (!cachedContent.name) {\n            throw new GoogleGenerativeAIRequestInputError(\"Cached content must contain a `name` field.\");\n        }\n        if (!cachedContent.model) {\n            throw new GoogleGenerativeAIRequestInputError(\"Cached content must contain a `model` field.\");\n        }\n        /**\n         * Not checking tools and toolConfig for now as it would require a deep\n         * equality comparison and isn't likely to be a common case.\n         */\n        const disallowedDuplicates = [\"model\", \"systemInstruction\"];\n        for (const key of disallowedDuplicates) {\n            if ((modelParams === null || modelParams === void 0 ? void 0 : modelParams[key]) &&\n                cachedContent[key] &&\n                (modelParams === null || modelParams === void 0 ? void 0 : modelParams[key]) !== cachedContent[key]) {\n                if (key === \"model\") {\n                    const modelParamsComp = modelParams.model.startsWith(\"models/\")\n                        ? modelParams.model.replace(\"models/\", \"\")\n                        : modelParams.model;\n                    const cachedContentComp = cachedContent.model.startsWith(\"models/\")\n                        ? cachedContent.model.replace(\"models/\", \"\")\n                        : cachedContent.model;\n                    if (modelParamsComp === cachedContentComp) {\n                        continue;\n                    }\n                }\n                throw new GoogleGenerativeAIRequestInputError(`Different value for \"${key}\" specified in modelParams` +\n                    ` (${modelParams[key]}) and cachedContent (${cachedContent[key]})`);\n            }\n        }\n        const modelParamsFromCache = Object.assign(Object.assign({}, modelParams), { model: cachedContent.model, tools: cachedContent.tools, toolConfig: cachedContent.toolConfig, systemInstruction: cachedContent.systemInstruction, cachedContent });\n        return new GenerativeModel(this.apiKey, modelParamsFromCache, requestOptions);\n    }\n}\n\nexports.ChatSession = ChatSession;\nexports.GenerativeModel = GenerativeModel;\nexports.GoogleGenerativeAI = GoogleGenerativeAI;\nexports.GoogleGenerativeAIError = GoogleGenerativeAIError;\nexports.GoogleGenerativeAIFetchError = GoogleGenerativeAIFetchError;\nexports.GoogleGenerativeAIRequestInputError = GoogleGenerativeAIRequestInputError;\nexports.GoogleGenerativeAIResponseError = GoogleGenerativeAIResponseError;\nexports.POSSIBLE_ROLES = POSSIBLE_ROLES;\n//# sourceMappingURL=index.js.map\n","import * as vscode from 'vscode';\nimport { MemoryAgent } from '../memory/memoryAgent';\nimport { ModelAgent } from '../model/modelAgent';\n\n/**\n * Interfaz base para todos los agentes del sistema\n */\nexport interface Agent {\n  initialize(...args: any[]): Promise<void>;\n  dispose(): void;\n}\n\n/**\n * Registro de todos los agentes creados por la fábrica\n */\nexport interface AgentRegistry {\n  memoryAgent: MemoryAgent;\n  modelAgent: ModelAgent;\n  // Añadir aquí nuevos agentes a medida que se implementen\n}\n\n/**\n * Fábrica responsable de crear e inicializar todos los agentes del sistema\n */\nexport class AgentFactory {\n  private agents: Partial<AgentRegistry> = {};\n\n  constructor(private context: vscode.ExtensionContext) {}\n\n  /**\n   * Crea e inicializa todos los agentes del sistema\n   * @returns Promesa que se resuelve cuando todos los agentes están inicializados\n   */\n  public async createAndInitializeAgents(): Promise<AgentRegistry> {\n    // Crear agentes\n    await this.createMemoryAgent();\n    await this.createModelAgent();\n    \n    // Verificar que todos los agentes requeridos existen\n    this.validateAgentRegistry();\n    \n    return this.agents as AgentRegistry;\n  }\n\n  /**\n   * Crea e inicializa el agente de memoria\n   */\n  private async createMemoryAgent(): Promise<void> {\n    console.log('Creando MemoryAgent...');\n    const memoryAgent = new MemoryAgent(this.context);\n    \n    // Inicializar el agente de memoria\n    await memoryAgent.initialize();\n    \n    this.agents.memoryAgent = memoryAgent;\n  }\n\n  /**\n   * Crea e inicializa el agente de modelo\n   */\n  private async createModelAgent(): Promise<void> {\n    console.log('Creando ModelAgent...');\n    const modelAgent = new ModelAgent();\n    await modelAgent.initialize(this.context);\n    this.agents.modelAgent = modelAgent;\n  }\n\n\n\n  /**\n   * Valida que todos los agentes requeridos existan\n   */\n  private validateAgentRegistry(): void {\n    if (!this.agents.memoryAgent) {\n      throw new Error('MemoryAgent no inicializado');\n    }\n    \n    if (!this.agents.modelAgent) {\n      throw new Error('ModelAgent no inicializado');\n    }\n    \n    // Añadir validaciones para nuevos agentes aquí\n  }\n\n  /**\n   * Libera todos los recursos de los agentes\n   */\n  public dispose(): void {\n    console.log('Liberando recursos de todos los agentes...');\n    \n    // Liberar recursos de cada agente\n    Object.values(this.agents).forEach(agent => {\n      if (agent && typeof agent.dispose === 'function') {\n        agent.dispose();\n      }\n    });\n    \n    // Limpiar referencias\n    this.agents = {};\n  }\n}\n","export { AgentFactory, type Agent, type AgentRegistry } from './agentFactory';\n","import * as vscode from 'vscode';\nimport { SQLiteStorage } from '../../db/SQLiteStorage';\nimport { EventBus } from '../../utils/eventBus';\nimport { Events } from '../../utils/events';\nimport { \n  TemporaryMemory, \n  ChatMemory, \n  ProjectMemory,\n  ChatMessage,\n  Chat,\n  ChatSummary\n} from './tools';\n\n/**\n * MemoryAgent es responsable de gestionar toda la memoria de la extensión.\n * Maneja tanto la memoria persistente (proyecto y chat) como la memoria temporal\n * que solo dura durante un intercambio de mensajes.\n */\nexport class MemoryAgent {\n  // Herramientas de memoria\n  private temporaryMemory: TemporaryMemory;\n  private chatMemory: ChatMemory;\n  private projectMemory: ProjectMemory;\n  \n  // Estado actual\n  private currentChatId: string | null = null;\n  private messages: ChatMessage[] = [];\n  private chatList: ChatSummary[] = [];\n  \n  // Disposables para limpiar suscripciones\n  private disposables: { dispose: () => void }[] = [];\n\n  constructor(context: vscode.ExtensionContext) {\n    const storage = new SQLiteStorage(context);\n    \n    // Inicializar herramientas de memoria\n    this.temporaryMemory = new TemporaryMemory();\n    this.chatMemory = new ChatMemory(storage);\n    this.projectMemory = new ProjectMemory(storage);\n    \n    // Configurar listeners de eventos\n    this.setupEventListeners();\n  }\n\n  /**\n   * Configura los listeners de eventos para responder a acciones del sistema\n   */\n  private setupEventListeners(): void {\n    // Escuchar cuando se solicita un nuevo chat\n    const newChatUnsubscribe = EventBus.subscribe(\n      Events.UI.NEW_CHAT_REQUESTED,\n      async () => {\n        await this.createNewChat();\n      }\n    );\n    \n    // Escuchar cuando se solicita cargar un chat\n    const loadChatUnsubscribe = EventBus.subscribe(\n      Events.UI.LOAD_CHAT_REQUESTED,\n      async (data: { chatId: string }) => {\n        await this.loadChat(data.chatId);\n      }\n    );\n    \n    // Guardar las funciones para cancelar suscripciones\n    this.disposables.push(\n      { dispose: newChatUnsubscribe },\n      { dispose: loadChatUnsubscribe }\n    );\n  }\n\n  /**\n   * Almacena una memoria para un proyecto específico\n   * @param projectPath La ruta del proyecto como identificador\n   * @param key La clave bajo la cual almacenar la memoria\n   * @param content El contenido a almacenar\n   */\n  public async storeProjectMemory(projectPath: string, key: string, content: string): Promise<void> {\n    return this.projectMemory.storeProjectMemory(projectPath, key, content);\n  }\n\n  /**\n   * Recupera una memoria para un proyecto específico\n   * @param projectPath La ruta del proyecto como identificador\n   * @param key La clave para recuperar la memoria\n   */\n  public async getProjectMemory(projectPath: string, key: string): Promise<any> {\n    return this.projectMemory.getProjectMemory(projectPath, key);\n  }\n\n  /**\n   * Almacena una memoria temporal para el intercambio de mensajes actual\n   * @param key La clave bajo la cual almacenar la memoria\n   * @param content El contenido a almacenar\n   */\n  public storeTemporaryMemory(key: string, content: any): void {\n    this.temporaryMemory.store(key, content);\n  }\n\n  /**\n   * Recupera una memoria temporal\n   * @param key La clave para recuperar la memoria\n   */\n  public getTemporaryMemory(key: string): any {\n    return this.temporaryMemory.get(key);\n  }\n\n  /**\n   * Limpia todas las memorias temporales\n   * Debe llamarse después de completar cada intercambio de mensajes\n   */\n  public clearTemporaryMemory(): void {\n    this.temporaryMemory.clear();\n  }\n\n  /**\n   * Crea un nuevo chat y retorna su ID\n   * Si hay un chat actual con mensajes, lo guarda automáticamente\n   * @returns El ID del nuevo chat\n   */\n  public async createNewChat(): Promise<string> {\n    // Guardar el chat actual si tiene mensajes\n    await this.saveCurrentChatIfNeeded();\n    \n    // Generar un ID único para el nuevo chat\n    const chatId = this.chatMemory.generateChatId();\n    this.currentChatId = chatId;\n    this.messages = [];\n    \n    // Publicar evento de nuevo chat creado\n    EventBus.publish(Events.MEMORY.NEW_CHAT_CREATED, { chatId });\n    \n    console.log('Nuevo chat creado:', chatId);\n    return chatId;\n  }\n\n  /**\n   * Añade un mensaje al chat actual\n   * @param message El mensaje a añadir\n   */\n  public async addMessage(message: Partial<ChatMessage>): Promise<void> {\n    // Asegurar que tenemos un chat actual\n    if (!this.currentChatId) {\n      await this.createNewChat();\n    }\n    \n    // Completar los campos faltantes del mensaje\n    const completeMessage: ChatMessage = {\n      role: message.role || 'user',\n      text: message.text || '',\n      timestamp: message.timestamp || new Date().toISOString()\n    };\n    \n    // Añadir el mensaje a la lista\n    this.messages.push(completeMessage);\n  }\n  \n  /**\n   * Procesa un par de mensajes (usuario y asistente) y los añade al chat actual\n   * @param userText El texto del mensaje del usuario\n   * @param assistantText El texto de la respuesta del asistente\n   * @returns Un objeto con el mensaje del usuario y la respuesta del asistente\n   */\n  public async processMessagePair(\n    userText: string, \n    assistantText: string\n  ): Promise<{userMessage: ChatMessage, assistantMessage: ChatMessage}> {\n    // Añadir mensaje del usuario\n    const userMessage: ChatMessage = {\n      role: 'user',\n      text: userText,\n      timestamp: new Date().toISOString()\n    };\n    \n    await this.addMessage(userMessage);\n    \n    // Añadir mensaje del asistente\n    const assistantMessage: ChatMessage = {\n      role: 'assistant',\n      text: assistantText,\n      timestamp: new Date().toISOString()\n    };\n    \n    await this.addMessage(assistantMessage);\n    \n    return { userMessage, assistantMessage };\n  }\n  \n  /**\n   * Obtiene todos los mensajes del chat actual\n   * @returns Array con los mensajes del chat actual\n   */\n  public getMessages(): ChatMessage[] {\n    return [...this.messages];\n  }\n\n  /**\n   * Guarda el chat actual con sus mensajes si es necesario\n   * @returns Promise que se resuelve cuando se guarda el chat\n   */\n  public async saveCurrentChatIfNeeded(): Promise<void> {\n    // Verificar que tenemos un ID de chat y al menos un mensaje\n    if (!this.currentChatId) {\n      console.log('No hay chat actual para guardar');\n      return;\n    }\n    \n    // Solo guardar si hay mensajes\n    if (this.messages.length === 0) {\n      console.log('No hay mensajes para guardar en el chat:', this.currentChatId);\n      return;\n    }\n    \n    console.log('Guardando chat actual:', this.currentChatId, 'con', this.messages.length, 'mensajes');\n    \n    // Generar un título a partir del primer mensaje del usuario\n    const firstUserMessage = this.messages.find(m => m.role === 'user');\n    const title = firstUserMessage \n      ? firstUserMessage.text.substring(0, 30) + (firstUserMessage.text.length > 30 ? '...' : '')\n      : `Chat ${new Date().toLocaleString()}`;\n    \n    // Crear un objeto de chat con metadatos\n    const chat: Chat = {\n      id: this.currentChatId,\n      title,\n      timestamp: new Date().toISOString(),\n      messages: this.messages,\n      preview: firstUserMessage ? firstUserMessage.text.substring(0, 50) : ''\n    };\n    \n    try {\n      // Almacenar el chat en la base de datos\n      await this.chatMemory.saveChat(this.currentChatId, chat);\n      \n      // Actualizar la lista de chats\n      const updatedList = await this.chatMemory.updateChatList(chat);\n      \n      // Actualizar la lista local\n      this.chatList = updatedList;\n      \n      // Publicar evento de lista de chats actualizada\n      EventBus.publish(Events.MEMORY.CHAT_LIST_UPDATED, updatedList);\n      \n      console.log('Chat guardado correctamente:', this.currentChatId);\n    } catch (error) {\n      console.error('Error al guardar el chat:', error);\n      throw error; // Propagar el error para manejarlo en niveles superiores\n    }\n  }\n\n  /**\n   * Carga la lista de todos los chats\n   * @returns Promise que se resuelve con la lista de chats\n   */\n  public async loadChatList(): Promise<ChatSummary[]> {\n    try {\n      this.chatList = await this.chatMemory.getChatList();\n      \n      // Publicar evento de lista de chats actualizada\n      EventBus.publish(Events.MEMORY.CHAT_LIST_UPDATED, this.chatList);\n      \n      return this.chatList;\n    } catch (error) {\n      console.error('Error al obtener la lista de chats:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Carga un chat por su ID\n   * @param chatId El ID del chat a cargar\n   * @returns Promise que se resuelve con los datos del chat\n   */\n  public async loadChat(chatId: string): Promise<Chat | null> {\n    try {\n      // Guardar el chat actual antes de cargar uno nuevo\n      await this.saveCurrentChatIfNeeded();\n      \n      const chat = await this.chatMemory.loadChat(chatId);\n      if (chat) {\n        this.currentChatId = chatId;\n        this.messages = chat.messages || [];\n        \n        // Publicar evento de chat cargado\n        EventBus.publish(Events.MEMORY.CHAT_LOADED, chat);\n        \n        return chat;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error al cargar el chat:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Inicializa el agente de memoria\n   * Carga la lista de chats al inicio y asegura que haya un chat actual\n   */\n  public async initialize(): Promise<void> {\n    console.log('MemoryAgent inicializado');\n    await this.loadChatList();\n    \n    // Asegurar que siempre haya un chat actual válido\n    if (!this.currentChatId) {\n      // Generar un ID único para el nuevo chat\n      this.currentChatId = this.chatMemory.generateChatId();\n      this.messages = [];\n      console.log('Nuevo chat creado al inicializar:', this.currentChatId);\n    }\n  }\n\n  /**\n   * Limpia los recursos cuando se desactiva la extensión\n   */\n  public dispose(): void {\n    console.log('MemoryAgent eliminado');\n    \n    // Guardar cualquier estado pendiente\n    this.saveCurrentChatIfNeeded().catch(err => {\n      console.error('Error al guardar el chat durante la desactivación:', err);\n    });\n    \n    // Cancelar todas las suscripciones a eventos\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}\n","import { SQLiteStorage } from '../../../db/SQLiteStorage';\n\n/**\n * Herramienta para gestionar la memoria de chats\n */\nexport class ChatMemory {\n  constructor(private storage: SQLiteStorage) {}\n\n  /**\n   * Guarda un chat en la base de datos\n   * @param chatId ID del chat\n   * @param chat Objeto de chat a guardar\n   */\n  public async saveChat(chatId: string, chat: any): Promise<void> {\n    try {\n      await this.storage.storeChatMemory(chatId, 'chat_data', JSON.stringify(chat));\n      console.log('Chat guardado correctamente:', chatId);\n    } catch (error) {\n      console.error('Error al guardar el chat:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Carga un chat desde la base de datos\n   * @param chatId ID del chat a cargar\n   * @returns El chat cargado o null si no existe\n   */\n  public async loadChat(chatId: string): Promise<any> {\n    try {\n      const chatData = await this.storage.getChatMemory(chatId, 'chat_data');\n      if (chatData && chatData.content) {\n        return JSON.parse(chatData.content);\n      }\n      return null;\n    } catch (error) {\n      console.error('Error al cargar el chat:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Actualiza la lista de chats\n   * @param newChat El nuevo chat a añadir a la lista\n   * @returns La lista actualizada de chats\n   */\n  public async updateChatList(newChat: any): Promise<any[]> {\n    try {\n      // Obtener la lista actual de chats\n      const chatList = await this.getChatList();\n      \n      // Crear una versión simplificada del chat para la lista\n      const chatSummary = {\n        id: newChat.id,\n        title: newChat.title,\n        timestamp: newChat.timestamp,\n        preview: newChat.preview\n      };\n      \n      // Comprobar si este chat ya existe en la lista\n      const existingIndex = chatList.findIndex((chat: any) => chat.id === chatSummary.id);\n      if (existingIndex >= 0) {\n        // Actualizar chat existente\n        chatList[existingIndex] = chatSummary;\n      } else {\n        // Añadir nuevo chat\n        chatList.push(chatSummary);\n      }\n      \n      // Guardar la lista actualizada\n      await this.storage.storeChatMemory('global', 'chat_list', JSON.stringify(chatList));\n      \n      return chatList;\n    } catch (error) {\n      console.error('Error al actualizar la lista de chats:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Obtiene la lista de todos los chats\n   * @returns La lista de chats\n   */\n  public async getChatList(): Promise<any[]> {\n    try {\n      const chatListData = await this.storage.getChatMemory('global', 'chat_list');\n      if (chatListData && chatListData.content) {\n        return JSON.parse(chatListData.content);\n      }\n      return [];\n    } catch (error) {\n      console.error('Error al obtener la lista de chats:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Genera un ID único para un nuevo chat\n   * @returns ID único para el chat\n   */\n  public generateChatId(): string {\n    return `chat_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n}\n","export * from './temporaryMemory';\nexport * from './chatMemory';\nexport * from './projectMemory';\nexport * from './types';\n","import { SQLiteStorage } from '../../../db/SQLiteStorage';\n\n/**\n * Herramienta para gestionar la memoria de proyectos\n */\nexport class ProjectMemory {\n  constructor(private storage: SQLiteStorage) {}\n\n  /**\n   * Almacena una memoria para un proyecto específico\n   * @param projectPath La ruta del proyecto como identificador\n   * @param key La clave bajo la cual almacenar la memoria\n   * @param content El contenido a almacenar\n   */\n  public async storeProjectMemory(projectPath: string, key: string, content: string): Promise<void> {\n    return this.storage.storeProjectMemory(projectPath, key, content);\n  }\n\n  /**\n   * Recupera una memoria para un proyecto específico\n   * @param projectPath La ruta del proyecto como identificador\n   * @param key La clave para recuperar la memoria\n   */\n  public async getProjectMemory(projectPath: string, key: string): Promise<any> {\n    return this.storage.getProjectMemory(projectPath, key);\n  }\n}\n","/**\n * Herramienta para gestionar la memoria temporal durante un intercambio de mensajes\n */\nexport class TemporaryMemory {\n  private memoryMap: Map<string, any> = new Map();\n\n  /**\n   * Almacena un valor en la memoria temporal\n   * @param key La clave bajo la cual almacenar el valor\n   * @param content El contenido a almacenar\n   */\n  public store(key: string, content: any): void {\n    this.memoryMap.set(key, content);\n  }\n\n  /**\n   * Recupera un valor de la memoria temporal\n   * @param key La clave para recuperar el valor\n   */\n  public get(key: string): any {\n    return this.memoryMap.get(key);\n  }\n\n  /**\n   * Limpia toda la memoria temporal\n   * Debe llamarse después de completar cada intercambio de mensajes\n   */\n  public clear(): void {\n    this.memoryMap.clear();\n  }\n}\n","/**\n * Tipos utilizados en el sistema de memoria\n */\n\n/**\n * Representa un mensaje en un chat\n */\nexport interface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  text: string;\n  timestamp: string;\n}\n\n/**\n * Representa un chat completo\n */\nexport interface Chat {\n  id: string;\n  title: string;\n  timestamp: string;\n  messages: ChatMessage[];\n  preview: string;\n}\n\n/**\n * Versión resumida de un chat para la lista\n */\nexport interface ChatSummary {\n  id: string;\n  title: string;\n  timestamp: string;\n  preview: string;\n}\n\n/**\n * Callback para notificaciones de actualización de chats\n */\nexport type ChatsUpdatedCallback = (chats: ChatSummary[]) => void;\n\n/**\n * Callback para notificaciones de carga de chat\n */\nexport type ChatLoadedCallback = (chat: Chat) => void;\n","import * as vscode from 'vscode';\nimport { BaseAPI } from '../../models/baseAPI';\nimport { EventBus } from '../../utils/eventBus';\nimport { Events } from '../../utils/events';\n\n/**\n * ModelAgent es responsable de gestionar la interacción con los modelos de lenguaje.\n * Encapsula la lógica de selección de modelo, generación de respuestas y gestión de solicitudes.\n */\nexport class ModelAgent {\n  private modelAPI: BaseAPI;\n  private disposables: { dispose: () => void }[] = [];\n  \n  constructor() {\n    // Inicializar con el modelo predeterminado\n    this.modelAPI = new BaseAPI(\"gemini\");\n    \n    // Configurar listeners de eventos\n    this.setupEventListeners();\n  }\n  \n  /**\n   * Configura los listeners de eventos para responder a acciones del sistema\n   */\n  private setupEventListeners(): void {\n    // No hay eventos específicos a los que el ModelAgent necesite suscribirse inicialmente\n    // Los eventos se manejan a través de métodos públicos que son llamados por el OrchestratorAgent\n  }\n  \n  /**\n   * Inicializa el agente de modelo\n   * @param context El contexto de la extensión\n   */\n  public async initialize(context: vscode.ExtensionContext): Promise<void> {\n    console.log('ModelAgent inicializado');\n    \n    // Configurar el modelo predeterminado desde la configuración\n    const config = vscode.workspace.getConfiguration('extensionAssistant');\n    const modelType = config.get<'ollama' | 'gemini'>('modelType') || 'gemini';\n    this.setModel(modelType);\n  }\n  \n  /**\n   * Cambia el modelo de lenguaje utilizado\n   * @param modelType El tipo de modelo a utilizar ('ollama' o 'gemini')\n   */\n  public setModel(modelType: \"ollama\" | \"gemini\"): void {\n    this.modelAPI.setModel(modelType);\n    console.log(`Modelo cambiado a: ${modelType}`);\n    \n    // Publicar evento de cambio de modelo\n    EventBus.publish(Events.MODEL.MODEL_CHANGED, { modelType });\n  }\n  \n  /**\n   * Genera una respuesta utilizando el modelo actual\n   * @param prompt El prompt para generar la respuesta\n   * @returns La respuesta generada por el modelo\n   */\n  public async generateResponse(prompt: string): Promise<string> {\n    try {\n      return await this.modelAPI.generateResponse(prompt);\n    } catch (error: any) {\n      console.error('Error al generar respuesta con el modelo:', error);\n      throw new Error(`Error al generar respuesta: ${error.message || 'Desconocido'}`);\n    }\n  }\n  \n  /**\n   * Cancela cualquier solicitud en curso al modelo\n   */\n  public abortRequest(): void {\n    this.modelAPI.abortRequest();\n  }\n  \n  /**\n   * Limpia los recursos cuando la extensión es desactivada\n   */\n  public dispose(): void {\n    console.log('ModelAgent eliminado');\n    this.abortRequest();\n    \n    // Cancelar todas las suscripciones a eventos\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}\n","import * as vscode from 'vscode';\nimport { EventBus } from '../utils/eventBus';\nimport { Events } from '../utils/events';\nimport { MemoryAgent } from './memory/memoryAgent';\nimport { ModelAgent } from './model/modelAgent';\n\n/**\n * OrchestratorAgent es responsable de coordinar el flujo de procesamiento de mensajes\n * entre los diferentes agentes especializados utilizando un sistema de eventos.\n */\nexport class OrchestratorAgent {\n  private disposables: { dispose: () => void }[] = [];\n\n  constructor(\n    private memoryAgent: MemoryAgent,\n    private modelAgent: ModelAgent\n  ) {\n    console.log('OrchestratorAgent inicializado');\n    this.setupEventListeners();\n  }\n\n  /**\n   * Configura los listeners de eventos para responder a acciones del sistema\n   */\n  private setupEventListeners(): void {\n    // Suscribirse al evento de mensaje enviado desde la UI\n    const messageSentUnsubscribe = EventBus.subscribe(\n      Events.UI.MESSAGE_SENT,\n      (data: { message: string }) => this.processUserMessage(data.message)\n    );\n    \n    // Suscribirse al evento de cambio de modelo\n    const modelChangeUnsubscribe = EventBus.subscribe(\n      Events.UI.MODEL_CHANGE_REQUESTED,\n      (data: { modelType: 'ollama' | 'gemini' }) => this.modelAgent.setModel(data.modelType)\n    );\n    \n    // Guardar las funciones para cancelar suscripciones\n    this.disposables.push(\n      { dispose: messageSentUnsubscribe },\n      { dispose: modelChangeUnsubscribe }\n    );\n  }\n\n  /**\n   * Procesa un mensaje del usuario\n   * @param message El texto del mensaje del usuario\n   */\n  public async processUserMessage(message: string): Promise<void> {\n    console.log(`OrchestratorAgent procesando mensaje: ${message}`);\n    \n    // Notificar que se inició el procesamiento\n    EventBus.publish(Events.ORCHESTRATOR.PROCESSING_STARTED, { message });\n    \n    // Mostrar una notificación en VS Code (opcional, para depuración)\n    vscode.window.showInformationMessage(`Procesando: ${message}`);\n    \n    try {\n      // 1. Obtener respuesta del modelo\n      const assistantResponse = await this.modelAgent.generateResponse(message);\n      \n      // 2. Guardar el par mensaje-respuesta en la memoria\n      const messagePair = await this.memoryAgent.processMessagePair(message, assistantResponse);\n      \n      // 3. Notificar que se completó el procesamiento\n      EventBus.publish(Events.ORCHESTRATOR.PROCESSING_COMPLETED, {\n        userMessage: messagePair.userMessage,\n        assistantMessage: messagePair.assistantMessage\n      });\n    } catch (error: any) {\n      console.error('Error al procesar mensaje:', error);\n      \n      // Notificar error\n      EventBus.publish(Events.ORCHESTRATOR.PROCESSING_ERROR, {\n        message,\n        error: error.message || 'Error desconocido'\n      });\n    }\n  }\n\n  /**\n   * Libera los recursos utilizados por el agente orquestador\n   */\n  public dispose(): void {\n    console.log('Liberando recursos del OrchestratorAgent');\n    \n    // Cancelar todas las suscripciones a eventos\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}\n","import * as sqlite3 from 'sqlite3';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\n\nexport class SQLiteStorage {\n  private db: sqlite3.Database;\n\n  constructor(context: vscode.ExtensionContext) {\n    \n    const dbPath = path.join(context.globalStorageUri.fsPath, 'memory_agent.db');\n\n    // Asegurar que el directorio existe\n    const dbDir = path.dirname(dbPath);\n    if (!fs.existsSync(dbDir)) {\n      fs.mkdirSync(dbDir, { recursive: true });\n    }\n\n    this.db = new sqlite3.Database(dbPath, (err) => {\n      if (err) {\n        console.error('[SQLiteStorage] Error al abrir la base de datos:', err.message);\n        throw err;\n      }\n      // Inicializar la base de datos de forma síncrona para asegurar que las tablas existan\n      this.initializeDatabaseSync();\n    });\n  }\n\n  private async initializeDatabase(): Promise<void> {\n    // Check and create global_memory table\n    const globalTableExists = await this.checkTableExists(\"global_memory\");\n    if (!globalTableExists) {\n      await this.db.run(`\n        CREATE TABLE global_memory (\n          projectPath TEXT,\n          key TEXT,\n          content TEXT,\n          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n          PRIMARY KEY (projectPath, key)\n        )\n      `);\n    }\n    \n    // Check and create chat_memory table\n    const chatTableExists = await this.checkTableExists(\"chat_memory\");\n    if (!chatTableExists) {\n      await this.db.run(`\n        CREATE TABLE chat_memory (\n          chatId TEXT,\n          key TEXT,\n          content TEXT,\n          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n          PRIMARY KEY (chatId, key)\n        )\n      `);\n    }\n  }\n  \n  private initializeDatabaseSync(): void {\n    // Versión síncrona de initializeDatabase para usar en el constructor\n    this.db.serialize(() => {\n      // Crear tabla global_memory si no existe\n      this.db.run(`\n        CREATE TABLE IF NOT EXISTS global_memory (\n          projectPath TEXT,\n          key TEXT,\n          content TEXT,\n          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n          PRIMARY KEY (projectPath, key)\n        )\n      `);\n      \n      // Crear tabla chat_memory si no existe\n      this.db.run(`\n        CREATE TABLE IF NOT EXISTS chat_memory (\n          chatId TEXT,\n          key TEXT,\n          content TEXT,\n          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n          PRIMARY KEY (chatId, key)\n        )\n      `);\n      \n      console.log('[SQLiteStorage] Tablas inicializadas correctamente');\n    });\n  }\n\n  private async checkTableExists(tableName: string): Promise<boolean> {\n    const result = await this.db.get(\n      `SELECT name FROM sqlite_master WHERE type='table' AND name=?`,\n      [tableName]\n    );\n    return !!result;\n  }\n\n  public async getProjectMemory(projectPath: string, key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.db.get(\n        `SELECT * FROM global_memory WHERE projectPath = ? AND key = ?`,\n        [projectPath, key],\n        (err, row) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(row);\n          }\n        }\n      );\n    });\n  }\n\n\n  public async getChatMemory(chatId: string, key: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.db.get(\n        `SELECT * FROM chat_memory WHERE chatId = ? AND key = ?`,\n        [chatId, key],\n        (err, row) => {\n          if (err) {\n            console.error('[SQLiteStorage] Error al obtener memoria por chat:', err.message);\n            reject(err);\n          } else {\n            resolve(row);\n          }\n        }\n      );\n    });\n  }\n\n  public close(): void {\n    this.db.close((err) => {\n      if (err) {\n        console.error('[SQLiteStorage] Error al cerrar la base de datos:', err.message);\n      }\n    });\n  }\n\n  private async storeMemory(tableName: string, keyFields: string[], values: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const fields = keyFields.join(', ');\n      const placeholders = keyFields.map(() => '?').join(', ');\n      this.db.run(\n        `INSERT OR REPLACE INTO ${tableName} (${fields}) VALUES (${placeholders})`,\n        values,\n        function (err) {\n          if (err) {\n            console.error(`[SQLiteStorage] Error al insertar en ${tableName}:`, err.message);\n            reject(err);\n          } else {\n            resolve();\n          }\n        }\n      );\n    });\n  }\n\n  public async storeProjectMemory(projectPath: string, key: string, content: string): Promise<void> {\n    return this.storeMemory('global_memory', ['projectPath', 'key', 'content'], [projectPath, key, content]);\n  }\n  \n  public async storeChatMemory(chatId: string, key: string, content: string): Promise<void> {\n    return this.storeMemory('chat_memory', ['chatId', 'key', 'content'], [chatId, key, content]);\n  }\n}","import * as vscode from 'vscode';\nimport { WebViewManager } from './vscode_integration/webviewManager';\nimport { OrchestratorAgent } from './agents/orchestratorAgent';\nimport { MemoryAgent } from './agents/memory/memoryAgent';\nimport { ModelAgent } from './agents/model/modelAgent';\nimport { AgentFactory } from './agents/factory';\nimport { EventBus } from './utils/eventBus';\n\nexport async function activate(context: vscode.ExtensionContext) {\n  console.log('Extension \"extensionAssistant\" is now active!');\n\n  // Crear la fábrica de agentes\n  const agentFactory = new AgentFactory(context);\n  \n  // Inicializar todos los agentes\n  const agents = await agentFactory.createAndInitializeAgents();\n  \n  // Crear el orquestrador con los agentes ya inicializados\n  const orchestratorAgent = new OrchestratorAgent(\n    agents.memoryAgent,\n    agents.modelAgent\n  );\n  \n  // Crear e inicializar el WebViewManager\n  const webViewManager = new WebViewManager(context.extensionUri);\n  \n  // Registrar el WebViewManager como proveedor de vista\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(\n      WebViewManager.viewType,\n      webViewManager\n    )\n  );\n\n  // Registrar un comando para abrir la vista de chat\n  context.subscriptions.push(\n    vscode.commands.registerCommand('extensionAssistant.openChat', () => {\n      vscode.commands.executeCommand('workbench.view.extension.ai-chat-sidebar');\n    })\n  );\n\n  // Registrar un comando para enviar un mensaje de prueba\n  context.subscriptions.push(\n    vscode.commands.registerCommand('extensionAssistant.sendTestMessage', async () => {\n      await orchestratorAgent.processUserMessage('Mensaje de prueba desde comando');\n    })\n  );\n  \n  // Registrar recursos para limpieza durante la desactivación\n  context.subscriptions.push({\n    dispose: () => {\n      orchestratorAgent.dispose();\n      webViewManager.dispose();\n      agentFactory.dispose();\n      EventBus.dispose(); // Limpiar todos los eventos al desactivar la extensión\n    }\n  });\n}\n\nexport function deactivate() {\n  // Limpiar recursos cuando se desactive la extensión\n  console.log('Extension \"extensionAssistant\" is now deactivated!');\n}","type ModelType = \"ollama\" | \"gemini\";\n\n// Interfaz para implementaciones específicas de modelos\nexport interface ModelAPI {\n  generateResponse(prompt: string): Promise<string>;\n \n  abortRequest(): void;\n}\n\n\nexport class BaseAPI {\n  protected abortController: AbortController | null = null;\n  private modelInstance: ModelAPI | null = null;\n  private currentModel: ModelType;\n\n  constructor(modelType: ModelType) {\n    this.currentModel = modelType;\n  }\n\n  // Método para cambiar el modelo en tiempo de ejecución\n  setModel(modelType: ModelType): void {\n    if (this.currentModel !== modelType) {\n      this.currentModel = modelType;\n      this.modelInstance = null; // Forzar recreación de la instancia\n    }\n  }\n\n  // Método para obtener la instancia del modelo actual\n  private getModelInstance(): ModelAPI {\n    if (!this.modelInstance) {\n      // Importaciones dinámicas para evitar dependencias circulares\n      const { OllamaAPI } = require(\"./ollama\");\n      const { GeminiAPI } = require(\"./gemini\");\n\n      if (this.currentModel === \"ollama\") {\n        this.modelInstance = new OllamaAPI();\n      } else if (this.currentModel === \"gemini\") {\n        this.modelInstance = new GeminiAPI(\"AIzaSyBXGZbSj099c4bUOpLxbXKJgysGKKF3sR0\");\n      } else {\n        throw new Error(`Modelo no soportado: ${this.currentModel}`);\n      }\n    }\n    // Asegurarnos de que nunca devolvemos null\n    if (!this.modelInstance) {\n      throw new Error(`No se pudo crear una instancia para el modelo: ${this.currentModel}`);\n    }\n    return this.modelInstance;\n  }\n\n  // Implementación de los métodos que delegan a la instancia específica\n  async generateResponse(prompt: string): Promise<string> {\n    try {\n      // Log del prompt enviado al modelo\n      console.log(`[BaseAPI][${this.currentModel}] PROMPT::: `, prompt);\n      \n      console.log(`[BaseAPI] Generando respuesta con modelo: ${this.currentModel}`);\n      const response = await this.getModelInstance().generateResponse(prompt);\n      \n      // Log de la respuesta recibida\n      console.log(`[BaseAPI][${this.currentModel}] RESPONSE::: `, response);\n      \n      // Procesamiento común para ambos modelos\n      return this.normalizeResponse(response);\n    } catch (error) {\n      console.error(`[BaseAPI] Error generando respuesta con ${this.currentModel}:`, error);\n      throw error;\n    }\n  }\n\n\n\n  abortRequest(): void {\n    if (this.modelInstance) {\n      this.modelInstance.abortRequest();\n    }\n  }\n\n  // Método para normalizar respuestas de diferentes modelos\n  private normalizeResponse(response: string): string {\n    if (!response) return \"\";\n    \n    // Normalización específica por modelo\n    if (this.currentModel === \"ollama\") {\n      // Procesamiento específico para Ollama si es necesario\n      return response.trim();\n    } else if (this.currentModel === \"gemini\") {\n      // Procesamiento específico para Gemini si es necesario\n      return response.trim();\n    }\n    \n    return response.trim();\n  }\n}","// GeminiAPI.ts\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { ModelAPI } from \"./baseAPI\";\n\ninterface HuggingFaceEmbeddingResponse extends Array<number> {}\n\nexport class GeminiAPI implements ModelAPI {\n  protected abortController: AbortController | null = null;\n  private readonly genAI: GoogleGenerativeAI;\n  private readonly model: any;\n\n  constructor(apiKey: string) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n    this.model = this.genAI.getGenerativeModel({\n      model: \"gemini-2.0-flash-exp\",\n      generationConfig: {\n        temperature: 0.2,\n        topK: 40,\n        topP: 0.9,\n        maxOutputTokens: 2048,\n      },\n    });\n  }\n\n  async generateResponse(prompt: string): Promise<string> {\n    this.abortRequest();\n\n    this.abortController = new AbortController();\n\n    try {\n      const result = await this.model.generateContent(prompt, {\n        signal: this.abortController.signal,\n      });\n\n      if (!result.response) {\n        throw new Error(\"Empty response from Gemini.\");\n      }\n\n      return result.response.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error(\"Error in Gemini API:\", error);\n      throw error;\n    } finally {\n      this.abortController = null;\n    }\n  }\n\n  async generateEmbedding(text: string): Promise<number[] | null> {\n    try {\n      const response = await fetch(\"https://api-inference.huggingface.co/pipeline/feature-extraction/sentence-transformers/all-MiniLM-L6-v2\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer YOUR_HUGGING_FACE_API_KEY\",\n        },\n        body: JSON.stringify({\n          inputs: text,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error in response: ${response.statusText}`);\n      }\n\n      const data = (await response.json()) as HuggingFaceEmbeddingResponse;\n      return data;\n    } catch (error) {\n      console.error(\"Error generating Hugging Face embedding:\", error);\n      throw error;\n    }\n  }\n\n  abortRequest(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n      this.abortController = null;\n    }\n  }\n}","// OllamaAPI.ts\nimport { ModelAPI } from \"./baseAPI\";\n\ninterface OllamaEmbeddingResponse {\n  embedding: number[];\n}\n\nexport class OllamaAPI implements ModelAPI {\n  protected abortController: AbortController | null = null;\n  async generateResponse(prompt: string): Promise<string> {\n    this.abortRequest();\n\n    this.abortController = new AbortController();\n    let buffer = \"\";\n    \n    try {\n      const response = await fetch(\"http://localhost:11434/api/generate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          model: \"qwen2.5-coder:7b\",\n          prompt,\n          stream: true,\n          temperature: 0.2,\n        }),\n        signal: this.abortController.signal,\n      });\n\n      if (!response.ok || !response.body) {\n        throw new Error(`Error in response: ${response.statusText}`);\n      }\n    \n      \n      const reader = response.body.getReader();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = new TextDecoder().decode(value);\n        const lines = chunk.split(\"\\n\").filter((line) => line.trim());\n\n        for (const line of lines) {\n          try {\n            const data = JSON.parse(line);\n            buffer += data.response;\n          } catch (error) {\n            console.error(\"Error parsing JSON:\", error);\n          }\n        }\n      }\n      return buffer;\n    } catch (error) {\n      console.error(\"Error in OllamaAPI:\", error);\n      throw error;\n    } finally {\n      this.abortController = null;\n    }\n  }\n\n  async generateEmbedding(text: string): Promise<number[] | null> {\n    try {\n      const response = await fetch(\"http://localhost:11434/api/embeddings\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          model: \"nomic-embed-text\",\n          prompt: text,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error in response: ${response.statusText}`);\n      }\n\n      const data = await response.json() as OllamaEmbeddingResponse;\n      return data.embedding;\n    } catch (error) {\n      console.error(\"Error generating embedding:\", error);\n      throw error;\n    }\n  }\n\n  abortRequest(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n      this.abortController = null;\n    }\n  }\n}","/**\n * EventBus - Sistema de eventos para la comunicación entre componentes\n * Permite desacoplar los componentes mediante un patrón de publicación/suscripción\n */\nexport type EventCallback = (data?: any) => void;\n\nexport class EventBus {\n  private static listeners: Map<string, EventCallback[]> = new Map();\n  \n  /**\n   * Suscribe una función callback a un evento específico\n   * @param event Nombre del evento\n   * @param callback Función a ejecutar cuando ocurra el evento\n   * @returns Función para cancelar la suscripción\n   */\n  public static subscribe(event: string, callback: EventCallback): () => void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    \n    this.listeners.get(event)!.push(callback);\n    \n    // Retornar función para cancelar la suscripción\n    return () => {\n      const callbacks = this.listeners.get(event);\n      if (callbacks) {\n        const index = callbacks.indexOf(callback);\n        if (index !== -1) {\n          callbacks.splice(index, 1);\n        }\n      }\n    };\n  }\n  \n  /**\n   * Publica un evento con datos opcionales\n   * @param event Nombre del evento\n   * @param data Datos opcionales para pasar a los suscriptores\n   */\n  public static publish(event: string, data?: any): void {\n    if (this.listeners.has(event)) {\n      // Crear una copia del array para evitar problemas si un suscriptor\n      // se da de baja durante la ejecución\n      const callbacks = [...this.listeners.get(event)!];\n      callbacks.forEach(callback => callback(data));\n    }\n  }\n  \n  /**\n   * Elimina todas las suscripciones a un evento específico\n   * @param event Nombre del evento\n   */\n  public static clear(event: string): void {\n    this.listeners.delete(event);\n  }\n  \n  /**\n   * Elimina todas las suscripciones\n   */\n  public static clearAll(): void {\n    this.listeners.clear();\n  }\n  \n  /**\n   * Libera todos los recursos y limpia todas las suscripciones\n   * Debe llamarse cuando la extensión se desactiva\n   */\n  public static dispose(): void {\n    console.log('Liberando recursos del EventBus');\n    this.clearAll();\n  }\n}\n","/**\n * Definición de eventos de la aplicación\n * Centraliza todos los nombres de eventos para evitar errores de tipeo\n */\n\nexport const Events = {\n  // Eventos de UI\n  UI: {\n    MESSAGE_SENT: 'ui:message:sent',\n    NEW_CHAT_REQUESTED: 'ui:chat:new',\n    LOAD_CHAT_REQUESTED: 'ui:chat:load',\n    MODEL_CHANGE_REQUESTED: 'ui:model:change'\n  },\n  \n  // Eventos del orquestador\n  ORCHESTRATOR: {\n    PROCESSING_STARTED: 'orchestrator:processing:started',\n    PROCESSING_COMPLETED: 'orchestrator:processing:completed',\n    PROCESSING_ERROR: 'orchestrator:processing:error'\n  },\n  \n  // Eventos de memoria\n  MEMORY: {\n    CHAT_LIST_UPDATED: 'memory:chat:list:updated',\n    CHAT_LOADED: 'memory:chat:loaded',\n    CHAT_SAVED: 'memory:chat:saved',\n    NEW_CHAT_CREATED: 'memory:chat:new:created'\n  },\n  \n  // Eventos de modelo\n  MODEL: {\n    RESPONSE_GENERATED: 'model:response:generated',\n    MODEL_CHANGED: 'model:changed'\n  }\n};\n","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport { EventBus } from '../utils/eventBus';\nimport { Events } from '../utils/events';\n\n/**\n * Clase que centraliza toda la gestión de WebView\n * Maneja la creación, configuración y comunicación con el WebView\n */\nexport class WebViewManager implements vscode.WebviewViewProvider {\n  public static readonly viewType = 'aiChat.chatView';\n  private _view?: vscode.WebviewView;\n  private disposables: { dispose: () => void }[] = [];\n\n  constructor(\n    private readonly _extensionUri: vscode.Uri\n  ) {\n    // Configurar los listeners de eventos\n    this.setupEventListeners();\n  }\n  \n  /**\n   * Configura los listeners de eventos para responder a eventos del sistema\n   */\n  private setupEventListeners(): void {\n    // Escuchar cuando se completa el procesamiento de un mensaje\n    const processingCompletedUnsubscribe = EventBus.subscribe(\n      Events.ORCHESTRATOR.PROCESSING_COMPLETED,\n      (data) => {\n        this.sendMessageToWebview({\n          type: 'receiveMessage',\n          message: data.assistantMessage.text,\n          isUser: false\n        });\n      }\n    );\n    \n    // Escuchar cuando hay un error en el procesamiento\n    const processingErrorUnsubscribe = EventBus.subscribe(\n      Events.ORCHESTRATOR.PROCESSING_ERROR,\n      (data) => {\n        this.sendMessageToWebview({\n          type: 'receiveMessage',\n          message: `Error al procesar la solicitud: ${data.error}`,\n          isUser: false,\n          isError: true\n        });\n      }\n    );\n    \n    // Escuchar cuando se actualiza la lista de chats\n    const chatListUpdatedUnsubscribe = EventBus.subscribe(\n      Events.MEMORY.CHAT_LIST_UPDATED,\n      (chats) => {\n        this.sendMessageToWebview({\n          type: 'historyLoaded',\n          history: chats\n        });\n      }\n    );\n    \n    // Escuchar cuando se carga un chat\n    const chatLoadedUnsubscribe = EventBus.subscribe(\n      Events.MEMORY.CHAT_LOADED,\n      (chat) => {\n        this.sendMessageToWebview({\n          type: 'chatLoaded',\n          chat\n        });\n      }\n    );\n    \n    // Escuchar cuando se crea un nuevo chat\n    const newChatCreatedUnsubscribe = EventBus.subscribe(\n      Events.MEMORY.NEW_CHAT_CREATED,\n      () => {\n        // Enviar mensaje para limpiar el chat actual en la UI\n        this.sendMessageToWebview({\n          type: 'clearChat'\n        });\n      }\n    );\n    \n    // Guardar las funciones para cancelar suscripciones\n    this.disposables.push(\n      { dispose: processingCompletedUnsubscribe },\n      { dispose: processingErrorUnsubscribe },\n      { dispose: chatListUpdatedUnsubscribe },\n      { dispose: chatLoadedUnsubscribe },\n      { dispose: newChatCreatedUnsubscribe }\n    );\n  }\n\n  /**\n   * Método requerido por la interfaz WebviewViewProvider\n   * Se llama cuando VS Code necesita crear o restaurar la vista del webview\n   */\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken,\n  ): void | Thenable<void> {\n    console.log('Resolviendo webview view...');\n    this._view = webviewView;\n\n    // Configurar opciones del webview\n    this.configureWebviewOptions(webviewView);\n    \n    // Establecer el contenido HTML\n    webviewView.webview.html = this.getHtmlContent(webviewView.webview);\n    \n    // Configurar los manejadores de mensajes\n    this.setupMessageHandlers(webviewView);\n  }\n\n  /**\n   * Configura las opciones del webview\n   */\n  private configureWebviewOptions(webviewView: vscode.WebviewView): void {\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [\n        vscode.Uri.joinPath(this._extensionUri, 'out'),\n        vscode.Uri.joinPath(this._extensionUri, 'resources'),\n        this._extensionUri\n      ]\n    };\n  }\n\n  /**\n   * Configura los manejadores de mensajes desde el webview\n   */\n  private setupMessageHandlers(webviewView: vscode.WebviewView): void {\n    webviewView.webview.onDidReceiveMessage(async message => {\n      console.log('Mensaje recibido del webview:', message);\n      \n      try {        \n        switch (message.type) {\n          case 'sendMessage':\n            // Mostrar el mensaje del usuario en la UI inmediatamente\n            this.sendMessageToWebview({\n              type: 'receiveMessage',\n              message: message.message,\n              isUser: true\n            });\n            \n            // Publicar evento de mensaje enviado para procesamiento\n            EventBus.publish(Events.UI.MESSAGE_SENT, {\n              message: message.message\n            });\n            break;\n            \n          case 'newChat':\n            // Publicar evento de nuevo chat solicitado\n            EventBus.publish(Events.UI.NEW_CHAT_REQUESTED);\n            break;\n            \n          case 'loadChat':\n            // Publicar evento de carga de chat solicitada\n            EventBus.publish(Events.UI.LOAD_CHAT_REQUESTED, {\n              chatId: message.chatId\n            });\n            break;\n            \n          case 'setModel':\n            // Publicar evento de cambio de modelo solicitado\n            if (message.modelType === 'ollama' || message.modelType === 'gemini') {\n              EventBus.publish(Events.UI.MODEL_CHANGE_REQUESTED, {\n                modelType: message.modelType\n              });\n            } else {\n              throw new Error(`Modelo no soportado: ${message.modelType}`);\n            }\n            break;\n            \n          default:\n            console.warn('Tipo de mensaje no reconocido:', message.type);\n        }\n      } catch (error: any) {\n        console.error('Error al procesar mensaje:', error);\n        this.sendMessageToWebview({\n          type: 'error',\n          message: `Error: ${error.message || 'Desconocido'}`\n        });\n      }\n    });\n  }\n\n  /**\n   * Envía un mensaje al webview\n   */\n  public sendMessageToWebview(message: any): void {\n    if (this._view) {\n      console.log('Enviando mensaje al webview:', message);\n      this._view.webview.postMessage(message);\n    } else {\n      console.warn('No se puede enviar mensaje: webview no inicializado');\n    }\n  }\n\n  /**\n   * Genera el contenido HTML para el webview\n   */\n  private getHtmlContent(webview: vscode.Webview): string {\n    // Obtener la ruta al archivo webview.js generado por webpack\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, 'out', 'webview.js')\n    );\n\n    // Usar nonce para solo permitir scripts específicos\n    const nonce = this.generateNonce();\n\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; img-src ${webview.cspSource} https:; script-src 'nonce-${nonce}'; connect-src https:;\">\n      <title>AI Chat</title>\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n    </body>\n    </html>`;\n  }\n\n  /**\n   * Genera un nonce aleatorio para la política de seguridad de contenido\n   */\n  private generateNonce(): string {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  \n  /**\n   * Libera los recursos utilizados por el WebViewManager\n   */\n  public dispose(): void {\n    console.log('Liberando recursos del WebViewManager');\n    \n    // Cancelar todas las suscripciones a eventos\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"sqlite3\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/extension.ts\");\n",""],"names":[],"sourceRoot":""}