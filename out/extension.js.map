{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://extensionassistant/./src/extension.ts","webpack://extensionassistant/./src/vscode_integration/uiProvider.ts","webpack://extensionassistant/external commonjs \"vscode\"","webpack://extensionassistant/webpack/bootstrap","webpack://extensionassistant/webpack/before-startup","webpack://extensionassistant/webpack/startup","webpack://extensionassistant/webpack/after-startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { ChatViewProvider } from './vscode_integration/uiProvider';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Extension \"extensionAssistant\" is now active!');\n\n  // Registrar el proveedor de webview para la vista de chat\n  const chatViewProvider = new ChatViewProvider(context.extensionUri);\n  \n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(\n      ChatViewProvider.viewType,\n      chatViewProvider\n    )\n  );\n\n  // Registrar un comando para abrir la vista de chat\n  context.subscriptions.push(\n    vscode.commands.registerCommand('extensionAssistant.openChat', () => {\n      vscode.commands.executeCommand('workbench.view.extension.ai-chat-sidebar');\n    })\n  );\n\n  // Registrar un comando para enviar un mensaje de prueba\n  context.subscriptions.push(\n    vscode.commands.registerCommand('extensionAssistant.sendTestMessage', () => {\n      chatViewProvider.sendMessageToWebview({\n        command: 'receiveMessage',\n        text: 'Este es un mensaje de prueba desde la extensión',\n        isUser: false\n      });\n    })\n  );\n}\n\nexport function deactivate() {\n  // Limpiar recursos cuando se desactive la extensión\n  console.log('Extension \"extensionAssistant\" is now deactivated!');\n}","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport class ChatViewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = 'aiChat.chatView';\n  private _view?: vscode.WebviewView;\n\n  constructor(\n    private readonly _extensionUri: vscode.Uri,\n  ) {}\n\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken,\n  ) {\n    console.log('Resolviendo webview view...');\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      // Habilitar JavaScript en el webview\n      enableScripts: true,\n      \n      // Restringir el webview a cargar solo contenido de nuestro directorio de extensión\n      localResourceRoots: [\n        vscode.Uri.joinPath(this._extensionUri, 'out'),\n        vscode.Uri.joinPath(this._extensionUri, 'resources'),\n        this._extensionUri\n      ]\n    };\n\n    console.log('Configurando HTML del webview...');\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n    console.log('HTML configurado.');\n\n    // Manejar mensajes desde el webview\n    webviewView.webview.onDidReceiveMessage(message => {\n      console.log('Mensaje recibido del webview:', message);\n      switch (message.command) {\n        case 'sendMessage':\n          this._handleSendMessage(message.text);\n          return;\n      }\n    });\n  }\n\n  // Enviar un mensaje al webview\n  public sendMessageToWebview(message: any) {\n    if (this._view) {\n      this._view.webview.postMessage(message);\n    }\n  }\n\n  private _handleSendMessage(text: string) {\n    // Aquí implementarías la lógica para procesar el mensaje del usuario\n    // Por ejemplo, enviarlo a un modelo de IA y devolver la respuesta\n    vscode.window.showInformationMessage(`Mensaje recibido: ${text}`);\n    \n    // Simular una respuesta para probar\n    setTimeout(() => {\n      this.sendMessageToWebview({\n        command: 'receiveMessage',\n        text: `Respuesta a: ${text}`,\n        isUser: false\n      });\n    }, 1000);\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    // Obtener la ruta al archivo webview.js generado por webpack\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, 'out', 'webview.js')\n    );\n\n    // Usar nonce para solo permitir scripts específicos\n    const nonce = getNonce();\n\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; img-src ${webview.cspSource} https:; script-src 'nonce-${nonce}'; connect-src https:;\">\n      <title>AI Chat</title>\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n    </body>\n    </html>`;\n  }\n}\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/extension.ts\");\n",""],"names":[],"sourceRoot":""}